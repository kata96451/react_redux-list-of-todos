{"version":3,"sources":["features/filter.ts","features/currentTodo.ts","features/todos.ts","app/store.ts","components/TodoList/TodoList.tsx","components/TodoFilter/TodoFilter.tsx","api.ts","components/Loader/Loader.tsx","components/TodoModal/TodoModal.tsx","App.tsx","index.tsx"],"names":["Filter","actions","todo","type","payload","currentTodoReducer","state","action","TodosActionType","initialState","status","ALL","query","filterReducer","todos","SetTodosType","todosReducer","todosState","rootReducer","combineReducers","currentTodo","filter","store","createStore","composeWithDevTools","applyMiddleware","thunk","TodoList","props","selectedTodo","dispatch","useDispatch","length","className","map","classNames","id","completed","title","onClick","todoId","selectedTask","find","Number","currentTodoActions","handleClick","TodoFilter","useState","setQuery","onSubmit","event","preventDefault","onChange","filterActions","target","value","ACTIVE","COMPLETED","placeholder","e","style","pointerEvents","get","url","delay","fullURL","Promise","resolve","setTimeout","then","fetch","res","json","Loader","TodoModal","user","setUser","useEffect","userId","href","name","App","useSelector","prepTodos","includeSearch","toLowerCase","includes","isLoading","setIsLoading","TodosActions","Root","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.9e72922f.chunk.js","sourcesContent":["import { Status } from '../types/Status';\n\nexport enum Filter {\n  ALL = 'all',\n  ACTIVE = 'active',\n  COMPLETED = 'completed',\n}\n\ntype State = {\n  query: string,\n  status: Status,\n};\n\ntype FilterByQueryType = {\n  type: 'filter/query',\n  payload: string,\n};\n\ntype FilterByCompletedType = {\n  type: 'filter/complited',\n  payload: Status,\n};\n\nconst initialState: State = {\n  status: Filter.ALL,\n  query: '',\n};\n\nconst filterByCompleted = (status: Status): FilterByCompletedType => ({\n  type: 'filter/complited',\n  payload: status,\n});\n\nconst filterByQuery = (query: string): FilterByQueryType => ({\n  type: 'filter/query',\n  payload: query,\n});\n\nexport const actions = { filterByQuery, filterByCompleted };\n\nconst filterReducer = (\n  state: State = initialState,\n  action: FilterByQueryType | FilterByCompletedType,\n): State => {\n  switch (action.type) {\n    case 'filter/complited':\n      return { ...state, status: action.payload };\n\n    case 'filter/query':\n      return { ...state, query: action.payload };\n\n    default:\n      return state;\n  }\n};\n\nexport default filterReducer;\n","import { Todo } from '../types/Todo';\n\ntype RemoveTodoAction = { type: 'currentTodo/REMOVE' };\n\ntype SetTodoAction = {\n  type: 'currentTodo/SET';\n  payload: Todo;\n};\n\nconst removeTodo = (): RemoveTodoAction => ({ type: 'currentTodo/REMOVE' });\n\nconst setTodo = (todo: Todo): SetTodoAction => ({\n  type: 'currentTodo/SET',\n  payload: todo,\n});\n\nexport const actions = { setTodo, removeTodo };\n\ntype State = Todo | null;\ntype Action = SetTodoAction | RemoveTodoAction;\n\nconst currentTodoReducer = (\n  state: State = null,\n  action: Action,\n): State => {\n  switch (action.type) {\n    case 'currentTodo/SET':\n      return action.payload;\n\n    case 'currentTodo/REMOVE':\n      return null;\n\n    default:\n      return state;\n  }\n};\n\nexport default currentTodoReducer;\n","import { Action as BaseAction } from 'redux';\nimport { Todo } from '../types/Todo';\n\nexport interface Action<T, P> extends BaseAction<T> {\n  payload: P,\n}\n\nexport enum TodosActionType {\n  SetTodosType = 'todos/set_todos',\n}\n\ntype SetTodosActions = Action<TodosActionType.SetTodosType, Todo[]>;\n\nconst setTodosActionCreator = (todos: Todo[]): SetTodosActions => ({\n  type: TodosActionType.SetTodosType,\n  payload: todos,\n});\n\nexport const actions = { set: setTodosActionCreator };\n\nconst todosReducer = (\n  todosState: Todo[] = [],\n  action: SetTodosActions,\n): Todo[] => {\n  switch (action.type) {\n    case TodosActionType.SetTodosType:\n      return [...action.payload];\n\n    default:\n      return todosState;\n  }\n};\n\nexport default todosReducer;\n","import { createStore, applyMiddleware, combineReducers } from 'redux';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport thunk from 'redux-thunk';\n\nimport currentTodoReducer from '../features/currentTodo';\nimport filterReducer from '../features/filter';\nimport todosReducer from '../features/todos';\n\nconst rootReducer = combineReducers({\n  currentTodo: currentTodoReducer,\n  filter: filterReducer,\n  todos: todosReducer,\n});\n\nexport const store = createStore(\n  rootReducer,\n  composeWithDevTools(\n    applyMiddleware(thunk),\n  ),\n);\n\nexport type RootState = ReturnType<typeof store.getState>;\nexport type AppDispatch = typeof store.dispatch;\n","import classNames from 'classnames';\nimport { useDispatch } from 'react-redux';\nimport { Todo } from '../../types/Todo';\nimport { actions as currentTodoActions } from '../../features/currentTodo';\n\ninterface Props {\n  todos: Todo[],\n  selectedTodo: Todo | null,\n}\n\nexport const TodoList: React.FC<Props> = (props) => {\n  const { todos, selectedTodo } = props;\n  const dispatch = useDispatch();\n\n  const handleClick = (todoId: number) => {\n    const selectedTask = todos.find(todo => todo.id === Number(todoId));\n\n    if (selectedTask) {\n      dispatch(currentTodoActions.setTodo(selectedTask));\n    }\n  };\n\n  return (\n    <>\n      {todos.length === 0\n        ? (\n          <p className=\"notification is-warning\">\n            There are no todos matching current filter criteria\n          </p>\n        ) : (\n          <table className=\"table is-narrow is-fullwidth\">\n            <thead>\n              <tr>\n                <th>#</th>\n\n                <th>\n                  <span className=\"icon\">\n                    <i className=\"fas fa-check\" />\n                  </span>\n                </th>\n\n                <th>Title</th>\n                <th> </th>\n              </tr>\n            </thead>\n\n            <tbody>\n              {todos.map(todo => (\n                <tr\n                  data-cy=\"todo\"\n                  key={todo.id}\n                  className={classNames(\n                    {\n                      'has-background-info-light': selectedTodo?.id === todo.id,\n                    },\n                  )}\n                >\n                  <td className=\"is-vcentered\">{todo.id}</td>\n                  <td className=\"is-vcentered\">\n                    {todo.completed && (\n                      <span\n                        className=\"icon\"\n                        data-cy=\"iconCompleted\"\n                      >\n                        <i className=\"fas fa-check\" />\n                      </span>\n                    )}\n                  </td>\n\n                  <td className=\"is-vcentered is-expanded\">\n                    <p className={classNames(\n                      {\n                        'has-text-danger': todo.completed === true,\n                        'has-text-success': todo.completed === false,\n                      },\n                    )}\n                    >\n                      {todo.title}\n                    </p>\n                  </td>\n\n                  <td className=\"has-text-right is-vcentered\">\n                    <button\n                      data-cy=\"selectButton\"\n                      className=\"button\"\n                      type=\"button\"\n                      onClick={() => {\n                        handleClick(todo.id);\n                      }}\n                    >\n                      <span className=\"icon\">\n                        <i\n                          className={classNames(\n                            'far',\n                            {\n                              'fa-eye-slash': selectedTodo?.id === todo.id,\n                              'fa-eye': selectedTodo?.id !== todo.id,\n                            },\n                          )}\n                        />\n                      </span>\n                    </button>\n                  </td>\n                </tr>\n              ))}\n            </tbody>\n          </table>\n        )}\n    </>\n  );\n};\n","import React, { useState } from 'react';\nimport { useDispatch } from 'react-redux';\nimport { actions as filterActions, Filter } from '../../features/filter';\nimport { Status } from '../../types/Status';\n\nexport const TodoFilter: React.FC = () => {\n  const dispatch = useDispatch();\n  const [query, setQuery] = useState('');\n\n  return (\n    <form\n      className=\"field has-addons\"\n      onSubmit={event => {\n        event.preventDefault();\n      }}\n    >\n      <p className=\"control\">\n        <span className=\"select\">\n          <select\n            data-cy=\"statusSelect\"\n            onChange={\n              (event) => {\n                event.preventDefault();\n                dispatch(filterActions\n                  .filterByCompleted(event.target.value as Status));\n              }\n            }\n          >\n            <option\n              value={Filter.ALL}\n            >\n              All\n            </option>\n            <option\n              value={Filter.ACTIVE}\n            >\n              Active\n            </option>\n            <option\n              value={Filter.COMPLETED}\n            >\n              Completed\n            </option>\n          </select>\n        </span>\n      </p>\n\n      <p className=\"control is-expanded has-icons-left has-icons-right\">\n        <input\n          data-cy=\"searchInput\"\n          type=\"serch\"\n          className=\"input\"\n          placeholder=\"Search...\"\n          value={query}\n          onChange={(e) => {\n            setQuery(e.target.value);\n            dispatch(filterActions.filterByQuery(e.target.value));\n          }}\n        />\n        <span className=\"icon is-left\">\n          <i className=\"fas fa-magnifying-glass\" />\n        </span>\n\n        {query.length > 0 && (\n          <span className=\"icon is-right\" style={{ pointerEvents: 'all' }}>\n            {/* eslint-disable-next-line jsx-a11y/control-has-associated-label */}\n            <button\n              data-cy=\"clearSearchButton\"\n              type=\"button\"\n              className=\"delete\"\n              onClick={() => setQuery('')}\n            />\n          </span>\n        )}\n      </p>\n    </form>\n  );\n};\n","import { Todo } from './types/Todo';\nimport { User } from './types/User';\n\n// eslint-disable-next-line max-len\nconst BASE_URL = 'https://mate-academy.github.io/react_dynamic-list-of-todos/api';\n\nfunction wait(delay: number): Promise<void> {\n  return new Promise(resolve => {\n    setTimeout(resolve, delay);\n  });\n}\n\nfunction get<T>(url: string): Promise<T> {\n  // eslint-disable-next-line prefer-template\n  const fullURL = BASE_URL + url + '.json';\n\n  return wait(300)\n    .then(() => fetch(fullURL))\n    .then(res => res.json());\n}\n\nexport const getTodos = () => get<Todo[]>('/todos');\n\nexport const getUser = (userId: number) => get<User>(`/users/${userId}`);\n","import React from 'react';\nimport './Loader.scss';\n\nexport const Loader: React.FC = () => (\n  <div className=\"Loader\" data-cy=\"loader\">\n    <div className=\"Loader__content\" />\n  </div>\n);\n","import React, { useEffect, useState } from 'react';\nimport { useDispatch } from 'react-redux';\nimport { getUser } from '../../api';\nimport { Todo } from '../../types/Todo';\nimport { User } from '../../types/User';\nimport { Loader } from '../Loader';\nimport { actions as currentTodoActions } from '../../features/currentTodo';\n\ninterface Props {\n  selectedTodo: Todo,\n}\n\nexport const TodoModal: React.FC<Props> = (props) => {\n  const { selectedTodo } = props;\n  const dispatch = useDispatch();\n\n  const [user, setUser] = useState<User | null>(null);\n\n  useEffect(() => {\n    getUser(selectedTodo.userId)\n      .then(res => setUser(res));\n  }, [selectedTodo]);\n\n  return (\n    <div className=\"modal is-active\" data-cy=\"modal\">\n      <div className=\"modal-background\" />\n\n      {!user\n        ? (\n          <Loader />\n        ) : (\n          <div className=\"modal-card\">\n            <header className=\"modal-card-head\">\n              <div\n                className=\"modal-card-title has-text-weight-medium\"\n                data-cy=\"modal-header\"\n              >\n                {`Todo #${selectedTodo.id}`}\n              </div>\n\n              {/* eslint-disable-next-line jsx-a11y/control-has-associated-label */}\n              <button\n                type=\"button\"\n                className=\"delete\"\n                data-cy=\"modal-close\"\n                onClick={() => dispatch(currentTodoActions.removeTodo())}\n              />\n            </header>\n\n            <div className=\"modal-card-body\">\n              <p\n                className=\"block\"\n                data-cy=\"modal-title\"\n              >\n                {selectedTodo.title}\n              </p>\n\n              <p className=\"block\" data-cy=\"modal-user\">\n                {selectedTodo.completed\n                  ? <strong className=\"has-text-danger\">Planned</strong>\n                  : <strong className=\"has-text-success\">Done</strong>}\n\n                {' by '}\n                <a href=\"mailto:Sincere@april.biz\">{user?.name}</a>\n              </p>\n            </div>\n          </div>\n        )}\n    </div>\n  );\n};\n","/* eslint-disable max-len */\nimport React, { useEffect, useState } from 'react';\nimport 'bulma/css/bulma.css';\nimport '@fortawesome/fontawesome-free/css/all.css';\n\nimport { useDispatch, useSelector } from 'react-redux';\nimport { TodoList } from './components/TodoList';\nimport { TodoFilter } from './components/TodoFilter';\nimport { TodoModal } from './components/TodoModal';\nimport { Loader } from './components/Loader';\nimport { AppDispatch, RootState } from './app/store';\nimport { getTodos } from './api';\nimport { actions as TodosActions } from './features/todos';\nimport { Todo } from './types/Todo';\nimport './App.scss';\nimport { Filter } from './features/filter';\n\nexport const App: React.FC = () => {\n  const dispatch: AppDispatch = useDispatch();\n  const selectedTodo: Todo | null = useSelector((state: RootState) => state.currentTodo);\n  const prepTodos: Todo[] = useSelector((state: RootState) => {\n    const { query, status } = state.filter;\n    const { todos } = state;\n\n    return todos.filter(todo => {\n      const includeSearch = todo.title.toLowerCase().includes(query.toLowerCase());\n\n      switch (status) {\n        case Filter.ACTIVE:\n          return includeSearch && todo.completed === false;\n\n        case Filter.COMPLETED:\n          return includeSearch && todo.completed === true;\n\n        case Filter.ALL:\n          return includeSearch;\n\n        default:\n          return todo;\n      }\n    });\n  });\n\n  const [isLoading, setIsLoading] = useState(false);\n\n  useEffect(() => {\n    setIsLoading(true);\n\n    getTodos()\n      .then((res) => {\n        dispatch(TodosActions.set(res));\n        setIsLoading(false);\n      });\n  }, []);\n\n  return (\n    <>\n      <div className=\"section\">\n        <div className=\"container\">\n          <div className=\"box\">\n            <h1 className=\"title\">Todos:</h1>\n\n            <div className=\"block\">\n              <TodoFilter />\n            </div>\n\n            <div className=\"block\">\n              {isLoading\n                ? <Loader />\n                : <TodoList todos={prepTodos} selectedTodo={selectedTodo} />}\n            </div>\n          </div>\n        </div>\n      </div>\n\n      {selectedTodo && <TodoModal selectedTodo={selectedTodo} />}\n    </>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { HashRouter as Router } from 'react-router-dom';\n\nimport { store } from './app/store';\nimport { App } from './App';\n\n// Just a convenient component with all the wrappers for the `App`\n// The Router component (if you use it) should be placed inside the Provider\nconst Root = () => (\n  <Provider store={store}>\n    <Router>\n      <App />\n    </Router>\n  </Provider>\n);\n\nReactDOM.render(<Root />, document.getElementById('root'));\n"],"sourceRoot":""}